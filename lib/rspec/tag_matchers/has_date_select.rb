require 'rspec/tag_matchers/multiple_input_matcher'

module RSpec::TagMatchers
  # Matches inputs generated by Rails' +date_select+ helper.
  #
  # @modifier discard
  #   Specifies that one or more components of the date are discarded in the +date_select+ helper.
  #   For example, <tt>discard(:day)</tt> should match the output of a +date_select+ helper that was
  #   given the option <tt>:discard_day => true</tt>. Note that this changes the matching criteria
  #   to expect a hidden input instead of a +<select>+ element for the components specified.
  #
  # @example Matching a date select for an event's +start_date+
  #   it { should have_date_select.for(:event => :start_date) }
  #
  # @example Matching a date select for a credit card expiration
  #   it { should have_date_select.discard(:day).for(:credit_card => :expiration) }
  #
  # @see HasDateSelect#discard
  #
  # @return [HasDateSelect]
  def have_date_select
    HasDateSelect.new
  end

  # A matcher that matches Rails' +date_select+ drop-downs.
  class HasDateSelect < MultipleInputMatcher
    include Helpers::SentenceHelper

    # Initializes a HasDateSelect matcher.
    def initialize
      super('1i' => HasSelect.new, '2i' => HasSelect.new, '3i' => HasSelect.new)
    end

    # Specifies that one or more components of the date will be hidden by Rails' +date_select+
    # helper. For example, calling +date_select+ with the option <tt>:discard_day => true</tt>
    # produces two +<select>+ elments (for the year and month components) and one hidden input for
    # the date component:
    #
    #   <select name="model[date(1i)]">...</select>
    #   <select name="model[date(2i)]">...</select>
    #   <input type="hidden" name="model[date(3i)]" />
    #
    # Since the default is to match three +<select>+ elements, one must call +discard(:day)+ to tell
    # a HasDateSelect matcher to expect a hidden input for the third component.
    #
    # @note This modifier replaces the matchers for the given date components. Any modifiers that
    #   were called before this one will be lost for those matchers. Therefor, +discard+ should be
    #   called before other modifiers, such as +for+. For example, the following matcher
    #   will only test the input names for the month and day components.
    #
    #     it { should have_date_select.for(:start_date).discard(:year) }
    #
    #   In order to test the input names for all three components, the +for+ modifier must come
    #   after the +discard+ modifier:
    #
    #     it { should have_date_select.discard(:year).for(:start_date) }
    #
    # @param [Symbols]  *parts  A variable number of symbols specifying which components should be
    #                           discarded. Valid symbols are +:year+, +:month+, and +:day+.
    #
    # @return [HasDateSelect] self
    def discard(*parts)
      @discard ||= []
      @discard  += parts

      parts.each do |part|
        # TODO: create a HasHiddenInput matcher
        replace_matcher(part, HasInput.new.with_attribute(:type => :hidden))
      end
      self
    end

    # Returns a description of the matcher's criteria.
    #
    # @return [String]
    def description
      [basic_description, extra_description].compact.reject(&:empty?).join(" ")
    end

    # Returns an explanation of why the matcher failed to match with +should+.
    #
    # @return [String]
    def failure_message
      "expected document to #{description}; got: #{@rendered}"
    end

    # Returns an explanation of why the matcher failed to match with +should_not+.
    #
    # @return [String]
    def negative_failure_message
      "expected document to not #{description}; got: #{@rendered}"
    end

    private

    # Replaces the matcher for the given date component.
    #
    # @param [Symbol]   part          The date component whose matcher should be replaced.
    # @param [HasInput] new_matcher   The matcher to replace the old one.
    def replace_matcher(part, new_matcher)
      key = key_for(part)
      @components[key] = new_matcher.with_attribute(:name => /\(#{key}\)/)
    end

    # Looks up the key for the given date component.
    #
    # @param [Symbol] part  A date component (+:year+, +:month+, or +:day+).
    #
    # @return [String] The requested key
    def key_for(part)
      {
        :year  => '1i',
        :month => '2i',
        :day   => '3i'
      }[part]
    end

    # Returns a basic description.
    #
    # @return [String]
    def basic_description
      "have date select"
    end

    # Provides an extra description fragment that can be appended to the basic description.
    #
    # @return [String]
    def extra_description
      [for_description, discard_description].compact.join(" ")
    end

    def for_description
      "for #{@for.join(".")}" if @for
    end

    def discard_description
      "without #{make_sentence(@discard, :conjunction => "or")}" if @discard
    end
  end
end
